using System;
using System.Collections.ObjectModel;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace SideBarAvalonia.ViewModels;

public partial class MainWindowViewModel : ViewModelBase
{
    // ObservableProperty is a custom attribute that allows us to notify the UI and get notified when the value changes
    [ObservableProperty] 
    private bool _isOpenPanel = true;

    [ObservableProperty]
    private ViewModelBase _currentPage = new HomePageViewModel();
    
    
    [ObservableProperty]
    private ListItemTemplate? _selectedListItem;

    /* This method is auto generated by CommunityToolKit and is called when the selected item is changed
     We're overriding it to create an instance of the current viewmodel */
    partial void OnSelectedListItemChanged(ListItemTemplate? value)
    {
        if (value is null) return;
        
        var instance= Activator.CreateInstance(value.ModelType);
        
        if (instance is not ViewModelBase viewModel)
            return;
        
        CurrentPage = viewModel;
    }
    public ObservableCollection<ListItemTemplate> Items { get; } = new()
    {
        new ListItemTemplate(typeof(HomePageViewModel), "HomeRegular"),
        new ListItemTemplate(typeof(ButtonPageViewModel), "CursorHoverRegular"),
    };

    [RelayCommand]
    private void TriggerPanel()
    {
        IsOpenPanel = !IsOpenPanel; 
    }
}

public class ListItemTemplate(Type type, string iconKey)
{
    public Type ModelType { get; } = type;
    public string Label { get; } = type.Name.Replace("PageViewModel", "");
    // We're using the StreamGeometry class to store the icon
    // Application.Current!.FindResource(iconKey) is used to get the icon from the App.xaml file
    public StreamGeometry ListItemIcon { get; } = (StreamGeometry)Application.Current!.FindResource(iconKey);
}